function (read_build_settings)
	file(STRINGS "${CMAKE_CURRENT_LIST_DIR}/../../build-settings.txt" file_settings_data)
	foreach (line ${file_settings_data})
		if (NOT "${line}" MATCHES "^//.*$")
			string(REGEX MATCH "[^:]+:" key "${line}")
			string(REGEX MATCH ":.*" value "${line}")
			string(LENGTH "${key}" length)
			math(EXPR length "${length} - 1")
			string(SUBSTRING "${key}" 0 ${length} key)
			string(SUBSTRING "${value}" 1 -1 value)
			string(STRIP "${key}" key)
			string(STRIP "${value}" value)

			set("nany_${key}" "${value}" CACHE INTERNAL "")
			nmessage("${key}: ${value}")
		endif()
	endforeach()
	if ("${nany_version_metadata}" STREQUAL "")
		if (NOT "$ENV{TRAVIS_TAG}" STREQUAL "")
			# do not append a metadata when compiled from a tag
		else()
			set(GIT_COMMIT_HASH "")
			if(NOT "$ENV{TRAVIS_COMMIT_RANGE}" STREQUAL "")
				string(REPLACE "..." ";" GIT_COMMIT_HASH "$ENV{TRAVIS_COMMIT_RANGE}")
				list(GET GIT_COMMIT_HASH 0 __start)
				list(GET GIT_COMMIT_HASH 1 __end)
				string(SUBSTRING "${__start}" 0 7 __start)
				string(SUBSTRING "${__end}" 0 7 __end)
				set(GIT_COMMIT_HASH "${__start}-${__end}")
			elseif(NOT "$ENV{TRAVIS_COMMIT}" STREQUAL "")
				string(SUBSTRING "$ENV{TRAVIS_COMMIT}" 0 7 GIT_COMMIT_HASH)
			else()
				find_program(bin_git NAMES "git")
				if (bin_git)
					execute_process(COMMAND "${bin_git}" log -1 --format=%h
						WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE GIT_COMMIT_HASH
						OUTPUT_STRIP_TRAILING_WHITESPACE)
				endif()
			endif()
			if (NOT "${GIT_COMMIT_HASH}" STREQUAL "")
				if (NOT "$ENV{TRAVIS_PULL_REQUEST}" STREQUAL "" AND NOT "$ENV{TRAVIS_PULL_REQUEST}" STREQUAL "false")
					set(GIT_COMMIT_HASH "github-$ENV{TRAVIS_PULL_REQUEST}-${GIT_COMMIT_HASH}")
				endif()

				set(nany_version_metadata "${GIT_COMMIT_HASH}" CACHE INTERNAL "")
			endif()
		endif()
	endif()
endfunction()

if ("${NANYC_VERSION}" STREQUAL "")
	set(NANYC_VERSION "0.0.0.localdev" CACHE INTERNAL "")
endif()
string(REPLACE "." ";" VERSION_LIST ${NANYC_VERSION})
list(GET VERSION_LIST 0 PVERSION_MAJOR)
list(GET VERSION_LIST 1 PVERSION_MINOR)
list(GET VERSION_LIST 2 PVERSION_PATCH)
set(nany_version_major "${PVERSION_MAJOR}" CACHE INTERNAL "" FORCE)
set(nany_version_minor "${PVERSION_MINOR}" CACHE INTERNAL "" FORCE)
set(nany_version_patch "${PVERSION_PATCH}" CACHE INTERNAL "" FORCE)
set(nany_version "${NANYC_VERSION}" CACHE INTERNAL "")
set(nany_version_string "${NANYC_VERSION}")

if ("${CMAKE_BUILD_TYPE}" STREQUAL "" OR (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "release" AND NOT "${CMAKE_BUILD_TYPE}" STREQUAL "debug"))
	# release by default
	set(CMAKE_BUILD_TYPE "debug")
endif()
nmessage("configuration: ${CMAKE_BUILD_TYPE}")


read_build_settings()
nmessage("") # for beauty (and to find it easily)
nmessage("version: ${nany_version_string}")

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
set(CMAKE_MACOSX_RPATH 1)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	# warning: nested namespace definition is a C++1z extension
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++1z-extensions")
endif()
