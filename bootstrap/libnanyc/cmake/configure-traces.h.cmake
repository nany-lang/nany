/*
** ny - https://nany.io
** This Source Code Form is subject to the terms of the Mozilla Public
** License, v. 2.0. If a copy of the MPL was not distributed with this
** file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
#pragma once

/* NOTE: this file is generated by cmake */


namespace ny {
namespace config {
namespace traces {


//! Enable all traces (very verbose)
static constexpr bool all = false;

static constexpr bool recommended = all or false;


//! Print all AST
static constexpr bool ast = false;

//! Print AST before normalization
static constexpr bool astBeforeNormalize = ast or false;

//! Print AST after normalization
static constexpr bool astAfterNormalize  = ast or false;

//! Print ATOM table
static constexpr bool atomTable = all or recommended or false;

//! Print ATOM table
static constexpr bool preAtomTable = all or false;

//! Print all types
static constexpr bool allTypeDefinitions = all or false;

//! Print classdef table
static constexpr bool classdefTable = all or recommended or false;

//! Print opcodes generated from AST
static constexpr bool sourceOpcodeSequence = all or recommended or false;

//! Print opcodes after program instanciation
static constexpr bool generatedOpcodeSequence = all or recommended or false;

//! Additionnal traces for properties resolution
static constexpr bool properties = all or false;

//! Export all raised errors per atom
static constexpr bool raisedErrorSummary = all or false;

} // namespace traces
} // namespace config
} // namespace ny
// vim: set ft=cpp:
