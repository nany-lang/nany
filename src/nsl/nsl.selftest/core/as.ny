// Nany - https://nany.io
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

/// \important THIS FILE IS AUTOMATICALLY GENERATED

unittest std.core.as.u8 {
	assert(std.math.equals(0u8, (0u8).as<:u8:>()));
	assert(std.math.equals(0u8, (0u16).as<:u8:>()));
	assert(std.math.equals(0u8, (0u32).as<:u8:>()));
	assert(std.math.equals(0u8, (0u64).as<:u8:>()));
	assert(std.math.equals(0u8, (0i8).as<:u8:>()));
	assert(std.math.equals(0u8, (0i16).as<:u8:>()));
	assert(std.math.equals(0u8, (0i32).as<:u8:>()));
	assert(std.math.equals(0u8, (0i64).as<:u8:>()));
	assert(std.math.equals(0u8, (0.000000i32).as<:u8:>()));
	assert(std.math.equals(0u8, (0.000000i64).as<:u8:>()));
	assert(std.math.equals(1u8, (1u8).as<:u8:>()));
	assert(std.math.equals(1u8, (1u16).as<:u8:>()));
	assert(std.math.equals(1u8, (1u32).as<:u8:>()));
	assert(std.math.equals(1u8, (1u64).as<:u8:>()));
	assert(std.math.equals(1u8, (1i8).as<:u8:>()));
	assert(std.math.equals(1u8, (1i16).as<:u8:>()));
	assert(std.math.equals(1u8, (1i32).as<:u8:>()));
	assert(std.math.equals(1u8, (1i64).as<:u8:>()));
	assert(std.math.equals(1u8, (1.000000i32).as<:u8:>()));
	assert(std.math.equals(1u8, (1.000000i64).as<:u8:>()));
	assert(std.math.equals(42u8, (42u8).as<:u8:>()));
	assert(std.math.equals(42u8, (42u16).as<:u8:>()));
	assert(std.math.equals(42u8, (42u32).as<:u8:>()));
	assert(std.math.equals(42u8, (42u64).as<:u8:>()));
	assert(std.math.equals(42u8, (42i8).as<:u8:>()));
	assert(std.math.equals(42u8, (42i16).as<:u8:>()));
	assert(std.math.equals(42u8, (42i32).as<:u8:>()));
	assert(std.math.equals(42u8, (42i64).as<:u8:>()));
	assert(std.math.equals(42u8, (42.000000i32).as<:u8:>()));
	assert(std.math.equals(42u8, (42.000000i64).as<:u8:>()));
	assert(std.math.equals(255u8, (-1i8).as<:u8:>()));
	assert(std.math.equals(255u8, (-1i16).as<:u8:>()));
	assert(std.math.equals(255u8, (-1i32).as<:u8:>()));
	assert(std.math.equals(255u8, (-1i64).as<:u8:>()));
	assert(std.math.equals(255u8, (-1.000000i32).as<:u8:>()));
	assert(std.math.equals(255u8, (-1.000000i64).as<:u8:>()));
}

unittest std.core.as.u16 {
	assert(std.math.equals(0u16, (0u8).as<:u16:>()));
	assert(std.math.equals(0u16, (0u16).as<:u16:>()));
	assert(std.math.equals(0u16, (0u32).as<:u16:>()));
	assert(std.math.equals(0u16, (0u64).as<:u16:>()));
	assert(std.math.equals(0u16, (0i8).as<:u16:>()));
	assert(std.math.equals(0u16, (0i16).as<:u16:>()));
	assert(std.math.equals(0u16, (0i32).as<:u16:>()));
	assert(std.math.equals(0u16, (0i64).as<:u16:>()));
	assert(std.math.equals(0u16, (0.000000i32).as<:u16:>()));
	assert(std.math.equals(0u16, (0.000000i64).as<:u16:>()));
	assert(std.math.equals(1u16, (1u8).as<:u16:>()));
	assert(std.math.equals(1u16, (1u16).as<:u16:>()));
	assert(std.math.equals(1u16, (1u32).as<:u16:>()));
	assert(std.math.equals(1u16, (1u64).as<:u16:>()));
	assert(std.math.equals(1u16, (1i8).as<:u16:>()));
	assert(std.math.equals(1u16, (1i16).as<:u16:>()));
	assert(std.math.equals(1u16, (1i32).as<:u16:>()));
	assert(std.math.equals(1u16, (1i64).as<:u16:>()));
	assert(std.math.equals(1u16, (1.000000i32).as<:u16:>()));
	assert(std.math.equals(1u16, (1.000000i64).as<:u16:>()));
	assert(std.math.equals(42u16, (42u8).as<:u16:>()));
	assert(std.math.equals(42u16, (42u16).as<:u16:>()));
	assert(std.math.equals(42u16, (42u32).as<:u16:>()));
	assert(std.math.equals(42u16, (42u64).as<:u16:>()));
	assert(std.math.equals(42u16, (42i8).as<:u16:>()));
	assert(std.math.equals(42u16, (42i16).as<:u16:>()));
	assert(std.math.equals(42u16, (42i32).as<:u16:>()));
	assert(std.math.equals(42u16, (42i64).as<:u16:>()));
	assert(std.math.equals(42u16, (42.000000i32).as<:u16:>()));
	assert(std.math.equals(42u16, (42.000000i64).as<:u16:>()));
	assert(std.math.equals(65535u16, (-1i8).as<:u16:>()));
	assert(std.math.equals(65535u16, (-1i16).as<:u16:>()));
	assert(std.math.equals(65535u16, (-1i32).as<:u16:>()));
	assert(std.math.equals(65535u16, (-1i64).as<:u16:>()));
	assert(std.math.equals(65535u16, (-1.000000i32).as<:u16:>()));
	assert(std.math.equals(65535u16, (-1.000000i64).as<:u16:>()));
}

unittest std.core.as.u32 {
	assert(std.math.equals(0u32, (0u8).as<:u32:>()));
	assert(std.math.equals(0u32, (0u16).as<:u32:>()));
	assert(std.math.equals(0u32, (0u32).as<:u32:>()));
	assert(std.math.equals(0u32, (0u64).as<:u32:>()));
	assert(std.math.equals(0u32, (0i8).as<:u32:>()));
	assert(std.math.equals(0u32, (0i16).as<:u32:>()));
	assert(std.math.equals(0u32, (0i32).as<:u32:>()));
	assert(std.math.equals(0u32, (0i64).as<:u32:>()));
	assert(std.math.equals(0u32, (0.000000i32).as<:u32:>()));
	assert(std.math.equals(0u32, (0.000000i64).as<:u32:>()));
	assert(std.math.equals(1u32, (1u8).as<:u32:>()));
	assert(std.math.equals(1u32, (1u16).as<:u32:>()));
	assert(std.math.equals(1u32, (1u32).as<:u32:>()));
	assert(std.math.equals(1u32, (1u64).as<:u32:>()));
	assert(std.math.equals(1u32, (1i8).as<:u32:>()));
	assert(std.math.equals(1u32, (1i16).as<:u32:>()));
	assert(std.math.equals(1u32, (1i32).as<:u32:>()));
	assert(std.math.equals(1u32, (1i64).as<:u32:>()));
	assert(std.math.equals(1u32, (1.000000i32).as<:u32:>()));
	assert(std.math.equals(1u32, (1.000000i64).as<:u32:>()));
	assert(std.math.equals(42u32, (42u8).as<:u32:>()));
	assert(std.math.equals(42u32, (42u16).as<:u32:>()));
	assert(std.math.equals(42u32, (42u32).as<:u32:>()));
	assert(std.math.equals(42u32, (42u64).as<:u32:>()));
	assert(std.math.equals(42u32, (42i8).as<:u32:>()));
	assert(std.math.equals(42u32, (42i16).as<:u32:>()));
	assert(std.math.equals(42u32, (42i32).as<:u32:>()));
	assert(std.math.equals(42u32, (42i64).as<:u32:>()));
	assert(std.math.equals(42u32, (42.000000i32).as<:u32:>()));
	assert(std.math.equals(42u32, (42.000000i64).as<:u32:>()));
	assert(std.math.equals(4294967295u32, (-1i8).as<:u32:>()));
	assert(std.math.equals(4294967295u32, (-1i16).as<:u32:>()));
	assert(std.math.equals(4294967295u32, (-1i32).as<:u32:>()));
	assert(std.math.equals(4294967295u32, (-1i64).as<:u32:>()));
	assert(std.math.equals(4294967295u32, (-1.000000i32).as<:u32:>()));
	assert(std.math.equals(4294967295u32, (-1.000000i64).as<:u32:>()));
}

unittest std.core.as.u64 {
	assert(std.math.equals(0u64, (0u8).as<:u64:>()));
	assert(std.math.equals(0u64, (0u16).as<:u64:>()));
	assert(std.math.equals(0u64, (0u32).as<:u64:>()));
	assert(std.math.equals(0u64, (0u64).as<:u64:>()));
	assert(std.math.equals(0u64, (0i8).as<:u64:>()));
	assert(std.math.equals(0u64, (0i16).as<:u64:>()));
	assert(std.math.equals(0u64, (0i32).as<:u64:>()));
	assert(std.math.equals(0u64, (0i64).as<:u64:>()));
	assert(std.math.equals(0u64, (0.000000i32).as<:u64:>()));
	assert(std.math.equals(0u64, (0.000000i64).as<:u64:>()));
	assert(std.math.equals(1u64, (1u8).as<:u64:>()));
	assert(std.math.equals(1u64, (1u16).as<:u64:>()));
	assert(std.math.equals(1u64, (1u32).as<:u64:>()));
	assert(std.math.equals(1u64, (1u64).as<:u64:>()));
	assert(std.math.equals(1u64, (1i8).as<:u64:>()));
	assert(std.math.equals(1u64, (1i16).as<:u64:>()));
	assert(std.math.equals(1u64, (1i32).as<:u64:>()));
	assert(std.math.equals(1u64, (1i64).as<:u64:>()));
	assert(std.math.equals(1u64, (1.000000i32).as<:u64:>()));
	assert(std.math.equals(1u64, (1.000000i64).as<:u64:>()));
	assert(std.math.equals(42u64, (42u8).as<:u64:>()));
	assert(std.math.equals(42u64, (42u16).as<:u64:>()));
	assert(std.math.equals(42u64, (42u32).as<:u64:>()));
	assert(std.math.equals(42u64, (42u64).as<:u64:>()));
	assert(std.math.equals(42u64, (42i8).as<:u64:>()));
	assert(std.math.equals(42u64, (42i16).as<:u64:>()));
	assert(std.math.equals(42u64, (42i32).as<:u64:>()));
	assert(std.math.equals(42u64, (42i64).as<:u64:>()));
	assert(std.math.equals(42u64, (42.000000i32).as<:u64:>()));
	assert(std.math.equals(42u64, (42.000000i64).as<:u64:>()));
	assert(std.math.equals(18446744073709551615u64, (-1i8).as<:u64:>()));
	assert(std.math.equals(18446744073709551615u64, (-1i16).as<:u64:>()));
	assert(std.math.equals(18446744073709551615u64, (-1i32).as<:u64:>()));
	assert(std.math.equals(18446744073709551615u64, (-1i64).as<:u64:>()));
	assert(std.math.equals(18446744073709551615u64, (-1.000000i32).as<:u64:>()));
	assert(std.math.equals(18446744073709551615u64, (-1.000000i64).as<:u64:>()));
}

unittest std.core.as.i8 {
	assert(std.math.equals(0i8, (0u8).as<:i8:>()));
	assert(std.math.equals(0i8, (0u16).as<:i8:>()));
	assert(std.math.equals(0i8, (0u32).as<:i8:>()));
	assert(std.math.equals(0i8, (0u64).as<:i8:>()));
	assert(std.math.equals(0i8, (0i8).as<:i8:>()));
	assert(std.math.equals(0i8, (0i16).as<:i8:>()));
	assert(std.math.equals(0i8, (0i32).as<:i8:>()));
	assert(std.math.equals(0i8, (0i64).as<:i8:>()));
	assert(std.math.equals(0i8, (0.000000i32).as<:i8:>()));
	assert(std.math.equals(0i8, (0.000000i64).as<:i8:>()));
	assert(std.math.equals(1i8, (1u8).as<:i8:>()));
	assert(std.math.equals(1i8, (1u16).as<:i8:>()));
	assert(std.math.equals(1i8, (1u32).as<:i8:>()));
	assert(std.math.equals(1i8, (1u64).as<:i8:>()));
	assert(std.math.equals(1i8, (1i8).as<:i8:>()));
	assert(std.math.equals(1i8, (1i16).as<:i8:>()));
	assert(std.math.equals(1i8, (1i32).as<:i8:>()));
	assert(std.math.equals(1i8, (1i64).as<:i8:>()));
	assert(std.math.equals(1i8, (1.000000i32).as<:i8:>()));
	assert(std.math.equals(1i8, (1.000000i64).as<:i8:>()));
	assert(std.math.equals(42i8, (42u8).as<:i8:>()));
	assert(std.math.equals(42i8, (42u16).as<:i8:>()));
	assert(std.math.equals(42i8, (42u32).as<:i8:>()));
	assert(std.math.equals(42i8, (42u64).as<:i8:>()));
	assert(std.math.equals(42i8, (42i8).as<:i8:>()));
	assert(std.math.equals(42i8, (42i16).as<:i8:>()));
	assert(std.math.equals(42i8, (42i32).as<:i8:>()));
	assert(std.math.equals(42i8, (42i64).as<:i8:>()));
	assert(std.math.equals(42i8, (42.000000i32).as<:i8:>()));
	assert(std.math.equals(42i8, (42.000000i64).as<:i8:>()));
	assert(std.math.equals(-1i8, (-1i8).as<:i8:>()));
	assert(std.math.equals(-1i8, (-1i16).as<:i8:>()));
	assert(std.math.equals(-1i8, (-1i32).as<:i8:>()));
	assert(std.math.equals(-1i8, (-1i64).as<:i8:>()));
	assert(std.math.equals(-1i8, (-1.000000i32).as<:i8:>()));
	assert(std.math.equals(-1i8, (-1.000000i64).as<:i8:>()));
}

unittest std.core.as.i16 {
	assert(std.math.equals(0i16, (0u8).as<:i16:>()));
	assert(std.math.equals(0i16, (0u16).as<:i16:>()));
	assert(std.math.equals(0i16, (0u32).as<:i16:>()));
	assert(std.math.equals(0i16, (0u64).as<:i16:>()));
	assert(std.math.equals(0i16, (0i8).as<:i16:>()));
	assert(std.math.equals(0i16, (0i16).as<:i16:>()));
	assert(std.math.equals(0i16, (0i32).as<:i16:>()));
	assert(std.math.equals(0i16, (0i64).as<:i16:>()));
	assert(std.math.equals(0i16, (0.000000i32).as<:i16:>()));
	assert(std.math.equals(0i16, (0.000000i64).as<:i16:>()));
	assert(std.math.equals(1i16, (1u8).as<:i16:>()));
	assert(std.math.equals(1i16, (1u16).as<:i16:>()));
	assert(std.math.equals(1i16, (1u32).as<:i16:>()));
	assert(std.math.equals(1i16, (1u64).as<:i16:>()));
	assert(std.math.equals(1i16, (1i8).as<:i16:>()));
	assert(std.math.equals(1i16, (1i16).as<:i16:>()));
	assert(std.math.equals(1i16, (1i32).as<:i16:>()));
	assert(std.math.equals(1i16, (1i64).as<:i16:>()));
	assert(std.math.equals(1i16, (1.000000i32).as<:i16:>()));
	assert(std.math.equals(1i16, (1.000000i64).as<:i16:>()));
	assert(std.math.equals(42i16, (42u8).as<:i16:>()));
	assert(std.math.equals(42i16, (42u16).as<:i16:>()));
	assert(std.math.equals(42i16, (42u32).as<:i16:>()));
	assert(std.math.equals(42i16, (42u64).as<:i16:>()));
	assert(std.math.equals(42i16, (42i8).as<:i16:>()));
	assert(std.math.equals(42i16, (42i16).as<:i16:>()));
	assert(std.math.equals(42i16, (42i32).as<:i16:>()));
	assert(std.math.equals(42i16, (42i64).as<:i16:>()));
	assert(std.math.equals(42i16, (42.000000i32).as<:i16:>()));
	assert(std.math.equals(42i16, (42.000000i64).as<:i16:>()));
	assert(std.math.equals(-1i16, (-1i8).as<:i16:>()));
	assert(std.math.equals(-1i16, (-1i16).as<:i16:>()));
	assert(std.math.equals(-1i16, (-1i32).as<:i16:>()));
	assert(std.math.equals(-1i16, (-1i64).as<:i16:>()));
	assert(std.math.equals(-1i16, (-1.000000i32).as<:i16:>()));
	assert(std.math.equals(-1i16, (-1.000000i64).as<:i16:>()));
}

unittest std.core.as.i32 {
	assert(std.math.equals(0i32, (0u8).as<:i32:>()));
	assert(std.math.equals(0i32, (0u16).as<:i32:>()));
	assert(std.math.equals(0i32, (0u32).as<:i32:>()));
	assert(std.math.equals(0i32, (0u64).as<:i32:>()));
	assert(std.math.equals(0i32, (0i8).as<:i32:>()));
	assert(std.math.equals(0i32, (0i16).as<:i32:>()));
	assert(std.math.equals(0i32, (0i32).as<:i32:>()));
	assert(std.math.equals(0i32, (0i64).as<:i32:>()));
	assert(std.math.equals(0i32, (0.000000i32).as<:i32:>()));
	assert(std.math.equals(0i32, (0.000000i64).as<:i32:>()));
	assert(std.math.equals(1i32, (1u8).as<:i32:>()));
	assert(std.math.equals(1i32, (1u16).as<:i32:>()));
	assert(std.math.equals(1i32, (1u32).as<:i32:>()));
	assert(std.math.equals(1i32, (1u64).as<:i32:>()));
	assert(std.math.equals(1i32, (1i8).as<:i32:>()));
	assert(std.math.equals(1i32, (1i16).as<:i32:>()));
	assert(std.math.equals(1i32, (1i32).as<:i32:>()));
	assert(std.math.equals(1i32, (1i64).as<:i32:>()));
	assert(std.math.equals(1i32, (1.000000i32).as<:i32:>()));
	assert(std.math.equals(1i32, (1.000000i64).as<:i32:>()));
	assert(std.math.equals(42i32, (42u8).as<:i32:>()));
	assert(std.math.equals(42i32, (42u16).as<:i32:>()));
	assert(std.math.equals(42i32, (42u32).as<:i32:>()));
	assert(std.math.equals(42i32, (42u64).as<:i32:>()));
	assert(std.math.equals(42i32, (42i8).as<:i32:>()));
	assert(std.math.equals(42i32, (42i16).as<:i32:>()));
	assert(std.math.equals(42i32, (42i32).as<:i32:>()));
	assert(std.math.equals(42i32, (42i64).as<:i32:>()));
	assert(std.math.equals(42i32, (42.000000i32).as<:i32:>()));
	assert(std.math.equals(42i32, (42.000000i64).as<:i32:>()));
	assert(std.math.equals(-1i32, (-1i8).as<:i32:>()));
	assert(std.math.equals(-1i32, (-1i16).as<:i32:>()));
	assert(std.math.equals(-1i32, (-1i32).as<:i32:>()));
	assert(std.math.equals(-1i32, (-1i64).as<:i32:>()));
	assert(std.math.equals(-1i32, (-1.000000i32).as<:i32:>()));
	assert(std.math.equals(-1i32, (-1.000000i64).as<:i32:>()));
}

unittest std.core.as.i64 {
	assert(std.math.equals(0i64, (0u8).as<:i64:>()));
	assert(std.math.equals(0i64, (0u16).as<:i64:>()));
	assert(std.math.equals(0i64, (0u32).as<:i64:>()));
	assert(std.math.equals(0i64, (0u64).as<:i64:>()));
	assert(std.math.equals(0i64, (0i8).as<:i64:>()));
	assert(std.math.equals(0i64, (0i16).as<:i64:>()));
	assert(std.math.equals(0i64, (0i32).as<:i64:>()));
	assert(std.math.equals(0i64, (0i64).as<:i64:>()));
	assert(std.math.equals(0i64, (0.000000i32).as<:i64:>()));
	assert(std.math.equals(0i64, (0.000000i64).as<:i64:>()));
	assert(std.math.equals(1i64, (1u8).as<:i64:>()));
	assert(std.math.equals(1i64, (1u16).as<:i64:>()));
	assert(std.math.equals(1i64, (1u32).as<:i64:>()));
	assert(std.math.equals(1i64, (1u64).as<:i64:>()));
	assert(std.math.equals(1i64, (1i8).as<:i64:>()));
	assert(std.math.equals(1i64, (1i16).as<:i64:>()));
	assert(std.math.equals(1i64, (1i32).as<:i64:>()));
	assert(std.math.equals(1i64, (1i64).as<:i64:>()));
	assert(std.math.equals(1i64, (1.000000i32).as<:i64:>()));
	assert(std.math.equals(1i64, (1.000000i64).as<:i64:>()));
	assert(std.math.equals(42i64, (42u8).as<:i64:>()));
	assert(std.math.equals(42i64, (42u16).as<:i64:>()));
	assert(std.math.equals(42i64, (42u32).as<:i64:>()));
	assert(std.math.equals(42i64, (42u64).as<:i64:>()));
	assert(std.math.equals(42i64, (42i8).as<:i64:>()));
	assert(std.math.equals(42i64, (42i16).as<:i64:>()));
	assert(std.math.equals(42i64, (42i32).as<:i64:>()));
	assert(std.math.equals(42i64, (42i64).as<:i64:>()));
	assert(std.math.equals(42i64, (42.000000i32).as<:i64:>()));
	assert(std.math.equals(42i64, (42.000000i64).as<:i64:>()));
	assert(std.math.equals(-1i64, (-1i8).as<:i64:>()));
	assert(std.math.equals(-1i64, (-1i16).as<:i64:>()));
	assert(std.math.equals(-1i64, (-1i32).as<:i64:>()));
	assert(std.math.equals(-1i64, (-1i64).as<:i64:>()));
	assert(std.math.equals(-1i64, (-1.000000i32).as<:i64:>()));
	assert(std.math.equals(-1i64, (-1.000000i64).as<:i64:>()));
}

unittest std.core.as.f32 {
	assert(std.math.equals(0.000000f32, (0u8).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0u16).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0u32).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0u64).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0i8).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0i16).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0i32).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0i64).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0.000000i32).as<:f32:>()));
	assert(std.math.equals(0.000000f32, (0.000000i64).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1u8).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1u16).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1u32).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1u64).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1i8).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1i16).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1i32).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1i64).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1.000000i32).as<:f32:>()));
	assert(std.math.equals(1.000000f32, (1.000000i64).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42u8).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42u16).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42u32).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42u64).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42i8).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42i16).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42i32).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42i64).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42.000000i32).as<:f32:>()));
	assert(std.math.equals(42.000000f32, (42.000000i64).as<:f32:>()));
	assert(std.math.equals(-1.000000f32, (-1i8).as<:f32:>()));
	assert(std.math.equals(-1.000000f32, (-1i16).as<:f32:>()));
	assert(std.math.equals(-1.000000f32, (-1i32).as<:f32:>()));
	assert(std.math.equals(-1.000000f32, (-1i64).as<:f32:>()));
	assert(std.math.equals(-1.000000f32, (-1.000000i32).as<:f32:>()));
	assert(std.math.equals(-1.000000f32, (-1.000000i64).as<:f32:>()));
}

unittest std.core.as.f64 {
	assert(std.math.equals(0.000000f64, (0u8).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0u16).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0u32).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0u64).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0i8).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0i16).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0i32).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0i64).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0.000000i32).as<:f64:>()));
	assert(std.math.equals(0.000000f64, (0.000000i64).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1u8).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1u16).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1u32).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1u64).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1i8).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1i16).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1i32).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1i64).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1.000000i32).as<:f64:>()));
	assert(std.math.equals(1.000000f64, (1.000000i64).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42u8).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42u16).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42u32).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42u64).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42i8).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42i16).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42i32).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42i64).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42.000000i32).as<:f64:>()));
	assert(std.math.equals(42.000000f64, (42.000000i64).as<:f64:>()));
	assert(std.math.equals(-1.000000f64, (-1i8).as<:f64:>()));
	assert(std.math.equals(-1.000000f64, (-1i16).as<:f64:>()));
	assert(std.math.equals(-1.000000f64, (-1i32).as<:f64:>()));
	assert(std.math.equals(-1.000000f64, (-1i64).as<:f64:>()));
	assert(std.math.equals(-1.000000f64, (-1.000000i32).as<:f64:>()));
	assert(std.math.equals(-1.000000f64, (-1.000000i64).as<:f64:>()));
}