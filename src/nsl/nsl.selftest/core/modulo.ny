// Nany - https://nany.io
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

/// \important THIS FILE IS AUTOMATICALLY GENERATED

unittest std.core.modulo.signed {
	assert(0i64 mod 1i64 == 0i64);
	assert(0i64 mod 2i64 == 0i64);
	assert(0i64 mod 3i64 == 0i64);
	assert(0i64 mod 4i64 == 0i64);
	assert(0i64 mod 5i64 == 0i64);
	assert(0i64 mod 6i64 == 0i64);
	assert(0i64 mod 7i64 == 0i64);
	assert(1i64 mod 1i64 == 0i64);
	assert(1i64 mod 2i64 == 1i64);
	assert(1i64 mod 3i64 == 1i64);
	assert(1i64 mod 4i64 == 1i64);
	assert(1i64 mod 5i64 == 1i64);
	assert(1i64 mod 6i64 == 1i64);
	assert(1i64 mod 7i64 == 1i64);
	assert(2i64 mod 1i64 == 0i64);
	assert(2i64 mod 2i64 == 0i64);
	assert(2i64 mod 3i64 == 2i64);
	assert(2i64 mod 4i64 == 2i64);
	assert(2i64 mod 5i64 == 2i64);
	assert(2i64 mod 6i64 == 2i64);
	assert(2i64 mod 7i64 == 2i64);
	assert(3i64 mod 1i64 == 0i64);
	assert(3i64 mod 2i64 == 1i64);
	assert(3i64 mod 3i64 == 0i64);
	assert(3i64 mod 4i64 == 3i64);
	assert(3i64 mod 5i64 == 3i64);
	assert(3i64 mod 6i64 == 3i64);
	assert(3i64 mod 7i64 == 3i64);
	assert(4i64 mod 1i64 == 0i64);
	assert(4i64 mod 2i64 == 0i64);
	assert(4i64 mod 3i64 == 1i64);
	assert(4i64 mod 4i64 == 0i64);
	assert(4i64 mod 5i64 == 4i64);
	assert(4i64 mod 6i64 == 4i64);
	assert(4i64 mod 7i64 == 4i64);
	assert(5i64 mod 1i64 == 0i64);
	assert(5i64 mod 2i64 == 1i64);
	assert(5i64 mod 3i64 == 2i64);
	assert(5i64 mod 4i64 == 1i64);
	assert(5i64 mod 5i64 == 0i64);
	assert(5i64 mod 6i64 == 5i64);
	assert(5i64 mod 7i64 == 5i64);
	assert(6i64 mod 1i64 == 0i64);
	assert(6i64 mod 2i64 == 0i64);
	assert(6i64 mod 3i64 == 0i64);
	assert(6i64 mod 4i64 == 2i64);
	assert(6i64 mod 5i64 == 1i64);
	assert(6i64 mod 6i64 == 0i64);
	assert(6i64 mod 7i64 == 6i64);
	assert(7i64 mod 1i64 == 0i64);
	assert(7i64 mod 2i64 == 1i64);
	assert(7i64 mod 3i64 == 1i64);
	assert(7i64 mod 4i64 == 3i64);
	assert(7i64 mod 5i64 == 2i64);
	assert(7i64 mod 6i64 == 1i64);
	assert(7i64 mod 7i64 == 0i64);
	assert(0i32 mod 1i32 == 0i32);
	assert(0i32 mod 2i32 == 0i32);
	assert(0i32 mod 3i32 == 0i32);
	assert(0i32 mod 4i32 == 0i32);
	assert(0i32 mod 5i32 == 0i32);
	assert(0i32 mod 6i32 == 0i32);
	assert(0i32 mod 7i32 == 0i32);
	assert(1i32 mod 1i32 == 0i32);
	assert(1i32 mod 2i32 == 1i32);
	assert(1i32 mod 3i32 == 1i32);
	assert(1i32 mod 4i32 == 1i32);
	assert(1i32 mod 5i32 == 1i32);
	assert(1i32 mod 6i32 == 1i32);
	assert(1i32 mod 7i32 == 1i32);
	assert(2i32 mod 1i32 == 0i32);
	assert(2i32 mod 2i32 == 0i32);
	assert(2i32 mod 3i32 == 2i32);
	assert(2i32 mod 4i32 == 2i32);
	assert(2i32 mod 5i32 == 2i32);
	assert(2i32 mod 6i32 == 2i32);
	assert(2i32 mod 7i32 == 2i32);
	assert(3i32 mod 1i32 == 0i32);
	assert(3i32 mod 2i32 == 1i32);
	assert(3i32 mod 3i32 == 0i32);
	assert(3i32 mod 4i32 == 3i32);
	assert(3i32 mod 5i32 == 3i32);
	assert(3i32 mod 6i32 == 3i32);
	assert(3i32 mod 7i32 == 3i32);
	assert(4i32 mod 1i32 == 0i32);
	assert(4i32 mod 2i32 == 0i32);
	assert(4i32 mod 3i32 == 1i32);
	assert(4i32 mod 4i32 == 0i32);
	assert(4i32 mod 5i32 == 4i32);
	assert(4i32 mod 6i32 == 4i32);
	assert(4i32 mod 7i32 == 4i32);
	assert(5i32 mod 1i32 == 0i32);
	assert(5i32 mod 2i32 == 1i32);
	assert(5i32 mod 3i32 == 2i32);
	assert(5i32 mod 4i32 == 1i32);
	assert(5i32 mod 5i32 == 0i32);
	assert(5i32 mod 6i32 == 5i32);
	assert(5i32 mod 7i32 == 5i32);
	assert(6i32 mod 1i32 == 0i32);
	assert(6i32 mod 2i32 == 0i32);
	assert(6i32 mod 3i32 == 0i32);
	assert(6i32 mod 4i32 == 2i32);
	assert(6i32 mod 5i32 == 1i32);
	assert(6i32 mod 6i32 == 0i32);
	assert(6i32 mod 7i32 == 6i32);
	assert(7i32 mod 1i32 == 0i32);
	assert(7i32 mod 2i32 == 1i32);
	assert(7i32 mod 3i32 == 1i32);
	assert(7i32 mod 4i32 == 3i32);
	assert(7i32 mod 5i32 == 2i32);
	assert(7i32 mod 6i32 == 1i32);
	assert(7i32 mod 7i32 == 0i32);
	assert(0i16 mod 1i16 == 0i16);
	assert(0i16 mod 2i16 == 0i16);
	assert(0i16 mod 3i16 == 0i16);
	assert(0i16 mod 4i16 == 0i16);
	assert(0i16 mod 5i16 == 0i16);
	assert(0i16 mod 6i16 == 0i16);
	assert(0i16 mod 7i16 == 0i16);
	assert(1i16 mod 1i16 == 0i16);
	assert(1i16 mod 2i16 == 1i16);
	assert(1i16 mod 3i16 == 1i16);
	assert(1i16 mod 4i16 == 1i16);
	assert(1i16 mod 5i16 == 1i16);
	assert(1i16 mod 6i16 == 1i16);
	assert(1i16 mod 7i16 == 1i16);
	assert(2i16 mod 1i16 == 0i16);
	assert(2i16 mod 2i16 == 0i16);
	assert(2i16 mod 3i16 == 2i16);
	assert(2i16 mod 4i16 == 2i16);
	assert(2i16 mod 5i16 == 2i16);
	assert(2i16 mod 6i16 == 2i16);
	assert(2i16 mod 7i16 == 2i16);
	assert(3i16 mod 1i16 == 0i16);
	assert(3i16 mod 2i16 == 1i16);
	assert(3i16 mod 3i16 == 0i16);
	assert(3i16 mod 4i16 == 3i16);
	assert(3i16 mod 5i16 == 3i16);
	assert(3i16 mod 6i16 == 3i16);
	assert(3i16 mod 7i16 == 3i16);
	assert(4i16 mod 1i16 == 0i16);
	assert(4i16 mod 2i16 == 0i16);
	assert(4i16 mod 3i16 == 1i16);
	assert(4i16 mod 4i16 == 0i16);
	assert(4i16 mod 5i16 == 4i16);
	assert(4i16 mod 6i16 == 4i16);
	assert(4i16 mod 7i16 == 4i16);
	assert(5i16 mod 1i16 == 0i16);
	assert(5i16 mod 2i16 == 1i16);
	assert(5i16 mod 3i16 == 2i16);
	assert(5i16 mod 4i16 == 1i16);
	assert(5i16 mod 5i16 == 0i16);
	assert(5i16 mod 6i16 == 5i16);
	assert(5i16 mod 7i16 == 5i16);
	assert(6i16 mod 1i16 == 0i16);
	assert(6i16 mod 2i16 == 0i16);
	assert(6i16 mod 3i16 == 0i16);
	assert(6i16 mod 4i16 == 2i16);
	assert(6i16 mod 5i16 == 1i16);
	assert(6i16 mod 6i16 == 0i16);
	assert(6i16 mod 7i16 == 6i16);
	assert(7i16 mod 1i16 == 0i16);
	assert(7i16 mod 2i16 == 1i16);
	assert(7i16 mod 3i16 == 1i16);
	assert(7i16 mod 4i16 == 3i16);
	assert(7i16 mod 5i16 == 2i16);
	assert(7i16 mod 6i16 == 1i16);
	assert(7i16 mod 7i16 == 0i16);
	assert(0i8 mod 1i8 == 0i8);
	assert(0i8 mod 2i8 == 0i8);
	assert(0i8 mod 3i8 == 0i8);
	assert(0i8 mod 4i8 == 0i8);
	assert(0i8 mod 5i8 == 0i8);
	assert(0i8 mod 6i8 == 0i8);
	assert(0i8 mod 7i8 == 0i8);
	assert(1i8 mod 1i8 == 0i8);
	assert(1i8 mod 2i8 == 1i8);
	assert(1i8 mod 3i8 == 1i8);
	assert(1i8 mod 4i8 == 1i8);
	assert(1i8 mod 5i8 == 1i8);
	assert(1i8 mod 6i8 == 1i8);
	assert(1i8 mod 7i8 == 1i8);
	assert(2i8 mod 1i8 == 0i8);
	assert(2i8 mod 2i8 == 0i8);
	assert(2i8 mod 3i8 == 2i8);
	assert(2i8 mod 4i8 == 2i8);
	assert(2i8 mod 5i8 == 2i8);
	assert(2i8 mod 6i8 == 2i8);
	assert(2i8 mod 7i8 == 2i8);
	assert(3i8 mod 1i8 == 0i8);
	assert(3i8 mod 2i8 == 1i8);
	assert(3i8 mod 3i8 == 0i8);
	assert(3i8 mod 4i8 == 3i8);
	assert(3i8 mod 5i8 == 3i8);
	assert(3i8 mod 6i8 == 3i8);
	assert(3i8 mod 7i8 == 3i8);
	assert(4i8 mod 1i8 == 0i8);
	assert(4i8 mod 2i8 == 0i8);
	assert(4i8 mod 3i8 == 1i8);
	assert(4i8 mod 4i8 == 0i8);
	assert(4i8 mod 5i8 == 4i8);
	assert(4i8 mod 6i8 == 4i8);
	assert(4i8 mod 7i8 == 4i8);
	assert(5i8 mod 1i8 == 0i8);
	assert(5i8 mod 2i8 == 1i8);
	assert(5i8 mod 3i8 == 2i8);
	assert(5i8 mod 4i8 == 1i8);
	assert(5i8 mod 5i8 == 0i8);
	assert(5i8 mod 6i8 == 5i8);
	assert(5i8 mod 7i8 == 5i8);
	assert(6i8 mod 1i8 == 0i8);
	assert(6i8 mod 2i8 == 0i8);
	assert(6i8 mod 3i8 == 0i8);
	assert(6i8 mod 4i8 == 2i8);
	assert(6i8 mod 5i8 == 1i8);
	assert(6i8 mod 6i8 == 0i8);
	assert(6i8 mod 7i8 == 6i8);
	assert(7i8 mod 1i8 == 0i8);
	assert(7i8 mod 2i8 == 1i8);
	assert(7i8 mod 3i8 == 1i8);
	assert(7i8 mod 4i8 == 3i8);
	assert(7i8 mod 5i8 == 2i8);
	assert(7i8 mod 6i8 == 1i8);
	assert(7i8 mod 7i8 == 0i8);
}

unittest std.core.modulo.unsigned {
	assert(0u64 mod 1u64 == 0u64);
	assert(0u64 mod 2u64 == 0u64);
	assert(0u64 mod 3u64 == 0u64);
	assert(0u64 mod 4u64 == 0u64);
	assert(0u64 mod 5u64 == 0u64);
	assert(0u64 mod 6u64 == 0u64);
	assert(0u64 mod 7u64 == 0u64);
	assert(1u64 mod 1u64 == 0u64);
	assert(1u64 mod 2u64 == 1u64);
	assert(1u64 mod 3u64 == 1u64);
	assert(1u64 mod 4u64 == 1u64);
	assert(1u64 mod 5u64 == 1u64);
	assert(1u64 mod 6u64 == 1u64);
	assert(1u64 mod 7u64 == 1u64);
	assert(2u64 mod 1u64 == 0u64);
	assert(2u64 mod 2u64 == 0u64);
	assert(2u64 mod 3u64 == 2u64);
	assert(2u64 mod 4u64 == 2u64);
	assert(2u64 mod 5u64 == 2u64);
	assert(2u64 mod 6u64 == 2u64);
	assert(2u64 mod 7u64 == 2u64);
	assert(3u64 mod 1u64 == 0u64);
	assert(3u64 mod 2u64 == 1u64);
	assert(3u64 mod 3u64 == 0u64);
	assert(3u64 mod 4u64 == 3u64);
	assert(3u64 mod 5u64 == 3u64);
	assert(3u64 mod 6u64 == 3u64);
	assert(3u64 mod 7u64 == 3u64);
	assert(4u64 mod 1u64 == 0u64);
	assert(4u64 mod 2u64 == 0u64);
	assert(4u64 mod 3u64 == 1u64);
	assert(4u64 mod 4u64 == 0u64);
	assert(4u64 mod 5u64 == 4u64);
	assert(4u64 mod 6u64 == 4u64);
	assert(4u64 mod 7u64 == 4u64);
	assert(5u64 mod 1u64 == 0u64);
	assert(5u64 mod 2u64 == 1u64);
	assert(5u64 mod 3u64 == 2u64);
	assert(5u64 mod 4u64 == 1u64);
	assert(5u64 mod 5u64 == 0u64);
	assert(5u64 mod 6u64 == 5u64);
	assert(5u64 mod 7u64 == 5u64);
	assert(6u64 mod 1u64 == 0u64);
	assert(6u64 mod 2u64 == 0u64);
	assert(6u64 mod 3u64 == 0u64);
	assert(6u64 mod 4u64 == 2u64);
	assert(6u64 mod 5u64 == 1u64);
	assert(6u64 mod 6u64 == 0u64);
	assert(6u64 mod 7u64 == 6u64);
	assert(7u64 mod 1u64 == 0u64);
	assert(7u64 mod 2u64 == 1u64);
	assert(7u64 mod 3u64 == 1u64);
	assert(7u64 mod 4u64 == 3u64);
	assert(7u64 mod 5u64 == 2u64);
	assert(7u64 mod 6u64 == 1u64);
	assert(7u64 mod 7u64 == 0u64);
	assert(0u32 mod 1u32 == 0u32);
	assert(0u32 mod 2u32 == 0u32);
	assert(0u32 mod 3u32 == 0u32);
	assert(0u32 mod 4u32 == 0u32);
	assert(0u32 mod 5u32 == 0u32);
	assert(0u32 mod 6u32 == 0u32);
	assert(0u32 mod 7u32 == 0u32);
	assert(1u32 mod 1u32 == 0u32);
	assert(1u32 mod 2u32 == 1u32);
	assert(1u32 mod 3u32 == 1u32);
	assert(1u32 mod 4u32 == 1u32);
	assert(1u32 mod 5u32 == 1u32);
	assert(1u32 mod 6u32 == 1u32);
	assert(1u32 mod 7u32 == 1u32);
	assert(2u32 mod 1u32 == 0u32);
	assert(2u32 mod 2u32 == 0u32);
	assert(2u32 mod 3u32 == 2u32);
	assert(2u32 mod 4u32 == 2u32);
	assert(2u32 mod 5u32 == 2u32);
	assert(2u32 mod 6u32 == 2u32);
	assert(2u32 mod 7u32 == 2u32);
	assert(3u32 mod 1u32 == 0u32);
	assert(3u32 mod 2u32 == 1u32);
	assert(3u32 mod 3u32 == 0u32);
	assert(3u32 mod 4u32 == 3u32);
	assert(3u32 mod 5u32 == 3u32);
	assert(3u32 mod 6u32 == 3u32);
	assert(3u32 mod 7u32 == 3u32);
	assert(4u32 mod 1u32 == 0u32);
	assert(4u32 mod 2u32 == 0u32);
	assert(4u32 mod 3u32 == 1u32);
	assert(4u32 mod 4u32 == 0u32);
	assert(4u32 mod 5u32 == 4u32);
	assert(4u32 mod 6u32 == 4u32);
	assert(4u32 mod 7u32 == 4u32);
	assert(5u32 mod 1u32 == 0u32);
	assert(5u32 mod 2u32 == 1u32);
	assert(5u32 mod 3u32 == 2u32);
	assert(5u32 mod 4u32 == 1u32);
	assert(5u32 mod 5u32 == 0u32);
	assert(5u32 mod 6u32 == 5u32);
	assert(5u32 mod 7u32 == 5u32);
	assert(6u32 mod 1u32 == 0u32);
	assert(6u32 mod 2u32 == 0u32);
	assert(6u32 mod 3u32 == 0u32);
	assert(6u32 mod 4u32 == 2u32);
	assert(6u32 mod 5u32 == 1u32);
	assert(6u32 mod 6u32 == 0u32);
	assert(6u32 mod 7u32 == 6u32);
	assert(7u32 mod 1u32 == 0u32);
	assert(7u32 mod 2u32 == 1u32);
	assert(7u32 mod 3u32 == 1u32);
	assert(7u32 mod 4u32 == 3u32);
	assert(7u32 mod 5u32 == 2u32);
	assert(7u32 mod 6u32 == 1u32);
	assert(7u32 mod 7u32 == 0u32);
	assert(0u16 mod 1u16 == 0u16);
	assert(0u16 mod 2u16 == 0u16);
	assert(0u16 mod 3u16 == 0u16);
	assert(0u16 mod 4u16 == 0u16);
	assert(0u16 mod 5u16 == 0u16);
	assert(0u16 mod 6u16 == 0u16);
	assert(0u16 mod 7u16 == 0u16);
	assert(1u16 mod 1u16 == 0u16);
	assert(1u16 mod 2u16 == 1u16);
	assert(1u16 mod 3u16 == 1u16);
	assert(1u16 mod 4u16 == 1u16);
	assert(1u16 mod 5u16 == 1u16);
	assert(1u16 mod 6u16 == 1u16);
	assert(1u16 mod 7u16 == 1u16);
	assert(2u16 mod 1u16 == 0u16);
	assert(2u16 mod 2u16 == 0u16);
	assert(2u16 mod 3u16 == 2u16);
	assert(2u16 mod 4u16 == 2u16);
	assert(2u16 mod 5u16 == 2u16);
	assert(2u16 mod 6u16 == 2u16);
	assert(2u16 mod 7u16 == 2u16);
	assert(3u16 mod 1u16 == 0u16);
	assert(3u16 mod 2u16 == 1u16);
	assert(3u16 mod 3u16 == 0u16);
	assert(3u16 mod 4u16 == 3u16);
	assert(3u16 mod 5u16 == 3u16);
	assert(3u16 mod 6u16 == 3u16);
	assert(3u16 mod 7u16 == 3u16);
	assert(4u16 mod 1u16 == 0u16);
	assert(4u16 mod 2u16 == 0u16);
	assert(4u16 mod 3u16 == 1u16);
	assert(4u16 mod 4u16 == 0u16);
	assert(4u16 mod 5u16 == 4u16);
	assert(4u16 mod 6u16 == 4u16);
	assert(4u16 mod 7u16 == 4u16);
	assert(5u16 mod 1u16 == 0u16);
	assert(5u16 mod 2u16 == 1u16);
	assert(5u16 mod 3u16 == 2u16);
	assert(5u16 mod 4u16 == 1u16);
	assert(5u16 mod 5u16 == 0u16);
	assert(5u16 mod 6u16 == 5u16);
	assert(5u16 mod 7u16 == 5u16);
	assert(6u16 mod 1u16 == 0u16);
	assert(6u16 mod 2u16 == 0u16);
	assert(6u16 mod 3u16 == 0u16);
	assert(6u16 mod 4u16 == 2u16);
	assert(6u16 mod 5u16 == 1u16);
	assert(6u16 mod 6u16 == 0u16);
	assert(6u16 mod 7u16 == 6u16);
	assert(7u16 mod 1u16 == 0u16);
	assert(7u16 mod 2u16 == 1u16);
	assert(7u16 mod 3u16 == 1u16);
	assert(7u16 mod 4u16 == 3u16);
	assert(7u16 mod 5u16 == 2u16);
	assert(7u16 mod 6u16 == 1u16);
	assert(7u16 mod 7u16 == 0u16);
	assert(0u8 mod 1u8 == 0u8);
	assert(0u8 mod 2u8 == 0u8);
	assert(0u8 mod 3u8 == 0u8);
	assert(0u8 mod 4u8 == 0u8);
	assert(0u8 mod 5u8 == 0u8);
	assert(0u8 mod 6u8 == 0u8);
	assert(0u8 mod 7u8 == 0u8);
	assert(1u8 mod 1u8 == 0u8);
	assert(1u8 mod 2u8 == 1u8);
	assert(1u8 mod 3u8 == 1u8);
	assert(1u8 mod 4u8 == 1u8);
	assert(1u8 mod 5u8 == 1u8);
	assert(1u8 mod 6u8 == 1u8);
	assert(1u8 mod 7u8 == 1u8);
	assert(2u8 mod 1u8 == 0u8);
	assert(2u8 mod 2u8 == 0u8);
	assert(2u8 mod 3u8 == 2u8);
	assert(2u8 mod 4u8 == 2u8);
	assert(2u8 mod 5u8 == 2u8);
	assert(2u8 mod 6u8 == 2u8);
	assert(2u8 mod 7u8 == 2u8);
	assert(3u8 mod 1u8 == 0u8);
	assert(3u8 mod 2u8 == 1u8);
	assert(3u8 mod 3u8 == 0u8);
	assert(3u8 mod 4u8 == 3u8);
	assert(3u8 mod 5u8 == 3u8);
	assert(3u8 mod 6u8 == 3u8);
	assert(3u8 mod 7u8 == 3u8);
	assert(4u8 mod 1u8 == 0u8);
	assert(4u8 mod 2u8 == 0u8);
	assert(4u8 mod 3u8 == 1u8);
	assert(4u8 mod 4u8 == 0u8);
	assert(4u8 mod 5u8 == 4u8);
	assert(4u8 mod 6u8 == 4u8);
	assert(4u8 mod 7u8 == 4u8);
	assert(5u8 mod 1u8 == 0u8);
	assert(5u8 mod 2u8 == 1u8);
	assert(5u8 mod 3u8 == 2u8);
	assert(5u8 mod 4u8 == 1u8);
	assert(5u8 mod 5u8 == 0u8);
	assert(5u8 mod 6u8 == 5u8);
	assert(5u8 mod 7u8 == 5u8);
	assert(6u8 mod 1u8 == 0u8);
	assert(6u8 mod 2u8 == 0u8);
	assert(6u8 mod 3u8 == 0u8);
	assert(6u8 mod 4u8 == 2u8);
	assert(6u8 mod 5u8 == 1u8);
	assert(6u8 mod 6u8 == 0u8);
	assert(6u8 mod 7u8 == 6u8);
	assert(7u8 mod 1u8 == 0u8);
	assert(7u8 mod 2u8 == 1u8);
	assert(7u8 mod 3u8 == 1u8);
	assert(7u8 mod 4u8 == 3u8);
	assert(7u8 mod 5u8 == 2u8);
	assert(7u8 mod 6u8 == 1u8);
	assert(7u8 mod 7u8 == 0u8);
}